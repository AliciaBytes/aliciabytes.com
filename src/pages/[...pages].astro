---
import { getCollection, render } from "astro:content";

import Layout from "@src/layouts/Layout.astro";
import render_markdown from "@src/utils/remark";
import { collectionFilter } from "@src/utils/collections";

import PublishUpdatedFragment from "@components/astro/PublishedUpdatedFragment.astro";
import LinkedPostList from "@src/components/astro/LinkedPostList.astro";
import SectionDivider from "@components/astro/SectionDivider.astro";

export async function getStaticPaths() {
  const content = await getCollection("content", collectionFilter);
  return content
    .filter((entry) => !entry.id.startsWith("_"))
    .map((entry) => ({
      params: { pages: entry.id },
      props: { entry },
    }));
}

const { entry } = Astro.props;
const { Content } = await render(entry);

const title = render_markdown(`# ${entry.data.title}`);
let hasRelatedItems = null;

if (entry?.data?.relatedContent?.length || entry?.data?.backlinks?.length) {
  hasRelatedItems = true;
}
---

<Layout
  title={entry.data.title}
  description={entry.data.excerpt}
  metaTitle={entry.data.metaTitle}
>
  <Fragment set:html={title} />
  <PublishUpdatedFragment
    publishedDate={entry.data.publishedDate}
    updated={entry.data.lastUpdated}
  />

  <Content />

  {hasRelatedItems && <SectionDivider />}

  <LinkedPostList
    description="Related content"
    related_items={entry.data.relatedContent}
  />

  <LinkedPostList
    description="Content linking here"
    related_items={entry.data.backlinks}
  />
</Layout>
